# This is a basic workflow to help you get started with Actions

name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    
  workflow_dispatch:
  
env:
  SERVER_IP: 10.11.42.228
  SERVER_USER: bsmch
  SERVER_PASSWORD: Capibara2019!
  
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
     - uses: actions/checkout@v3
     - run: ls
     - run: cd ./AI_api
     - uses: actions/setup-java@v3
       with:
         java-version: '17'
         distribution: 'temurin'
         run: mvn clean test
  build-server:
    needs: test
    runs-on: ubuntu-latest
    steps:
     - uses: actions/checkout@v3
     - run: cd ./AI_api
     - uses: actions/setup-java@v3
       with:
         java-version: '17'
         distribution: 'temurin'
         run: mvn clean package
     - uses: actions/cache@v3
       with:
             key: jarfile
             path: ./AI_api/target/*.jar
  build-docker:
    needs: build-server
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v3
        with:
             key: jarfile
             path: ./AI_api/target/*.jar
      - uses: actions/checkout@v3
      - run: docker build -t server:latest ./AI_api
      - run: mkdir out
      - run: docker save -o ./out/serverimage.tar server:latest
      - uses: actions/cache@v3
        with:
             key: tarfile
             path: ./out/serverimage.tar
  deploy:
    needs: build-docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v3
        with:
               key: tarfile
               path: ./out/serverimage.tar
      - run: sudo apt-get update -y
      - run: sudo apt-get install sshpass
      - run: shopt -s expand_aliases
      - run: alias on_server="sshpass -p \"$SERVER_PASSWORD\" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP"
      - run: on_server sudo -S <<< $SERVER_PASSWORD docker rm -f server || true
      - run: on_server sudo -S <<< $SERVER_PASSWORD docker image rm -f server || true
      - run: on_server rm -f /home/$SERVER_USER/serverimage.tar || true
      - run: on_server ls
      - run: sshpass -p "$SERVER_PASSWORD" scp -o StrictHostKeyChecking=no ./out/serverimage.tar  $SERVER_USER@$SERVER_IP:/home/$SERVER_USER/serverimage.tar
      - run: on_server sudo -S <<< $SERVER_PASSWORD docker load -i /home/$SERVER_USER/serverimage.tar
      - run: on_server sudo -S <<< $SERVER_PASSWORD docker run -d -p 80:80 --network=ai-net --name server server:latest
